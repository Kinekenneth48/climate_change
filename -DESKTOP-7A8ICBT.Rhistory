sigma = fit[["mle"]][3]
xi = fit[["mle"]][4]
}
} else if (fit[["model"]][[1]] == 1 && fit[["model"]][[2]] == 1 &&
is.null(fit[["model"]][[3]])){
for (t in 1:length(x)) {
mu[t] = fit[["mle"]][1] + fit[["mle"]][2] * t
sigma[t] = fit[["mle"]][3] + fit[["mle"]][4] * t
xi = fit[["mle"]][5]
}
} else{
for (t in 1:length(x)) {
mu[t] = fit[["mle"]][1] + fit[["mle"]][2] * t
sigma[t] = fit[["mle"]][3] + fit[["mle"]][4] * t
xi[t] = fit[["mle"]][5] + fit[["mle"]][6] * t
}
}
mu
sigma
xi
fit = fit3
if(fit[["model"]][[1]] == 1 && is.null(fit[["model"]][[2]]) &&
is.null(fit[["model"]][[3]])) {
for (t in 1:length(x)) {
mu[t] = fit[["mle"]][1] + fit[["mle"]][2] * t
sigma = fit[["mle"]][3]
xi = fit[["mle"]][4]
}
} else if (fit[["model"]][[1]] == 1 && fit[["model"]][[2]] == 1 &&
is.null(fit[["model"]][[3]])){
for (t in 1:length(x)) {
mu[t] = fit[["mle"]][1] + fit[["mle"]][2] * t
sigma[t] = fit[["mle"]][3] + fit[["mle"]][4] * t
xi = fit[["mle"]][5]
}
} else{
for (t in 1:length(x)) {
mu[t] = fit[["mle"]][1] + fit[["mle"]][2] * t
sigma[t] = fit[["mle"]][3] + fit[["mle"]][4] * t
xi[t] = fit[["mle"]][5] + fit[["mle"]][6] * t
}
}
mu
sigma
xi
fit = fit2
if(fit[["model"]][[1]] == 1 && is.null(fit[["model"]][[2]]) &&
is.null(fit[["model"]][[3]])) {
for (t in 1:length(x)) {
mu[t] = fit[["mle"]][1] + fit[["mle"]][2] * t
sigma = fit[["mle"]][3]
xi = fit[["mle"]][4]
}
} else if (fit[["model"]][[1]] == 1 && fit[["model"]][[2]] == 1 &&
is.null(fit[["model"]][[3]])){
for (t in 1:length(x)) {
mu[t] = fit[["mle"]][1] + fit[["mle"]][2] * t
sigma[t] = fit[["mle"]][3] + fit[["mle"]][4] * t
xi = fit[["mle"]][5]
}
} else{
for (t in 1:length(x)) {
mu[t] = fit[["mle"]][1] + fit[["mle"]][2] * t
sigma[t] = fit[["mle"]][3] + fit[["mle"]][4] * t
xi[t] = fit[["mle"]][5] + fit[["mle"]][6] * t
}
}
mu
sigma
xi
rep(xi,200)
(length(xi)==1)
(length(sigma)==1)
if (length(sigma)==1){
sigma=rep(sigma, length(mu))
}
if (length(xi)==1){
xi=rep(xi, length(mu))
}
sigma
xi
estimate_quantile <- function(mu, sigma, xi, p) {
n = length(mu)  # Assuming mu, sigma, and xi are of the same length
zp = numeric(n)  # Initialize a vector to store results
for (i in 1:n) {
if (xi[i] != 0) {
zp[i] = mu[i] - sigma[i]/xi[i] * (1 - (-log(1 - p))^(-xi[i]))
} else {
zp[i] = mu[i] - sigma[i] * log(-log(1 - p))
}
}
return(zp)
}
k=estimate_quantile(mu, sigma, xi, p=0.02)
k
plot(k)
fit[["conv"]]
return(rep(NA, length(mu) ))
rep(NA, length(mu) )
(fit[["conv"]]==0)
rl=estimate_quantile(mu, sigma, xi, p=0.02)
rl
styler:::style_active_file()
n <- length(x)
ydat_base <- matrix(rep(1:n, each = 1), nrow = n, ncol = 1)
fit1 <- ismev::gev.fit(xdat = x, ydat = ydat_base, mul = 1)
fit2 <- ismev::gev.fit(xdat = x, ydat = ydat_base, mul = 1, sigl = 1)
fit3 <- ismev::gev.fit(xdat = x, ydat = ydat_base, mul = 1, sigl = 1, shl = 1)
fit2 <- ismev::gev.fit(xdat = x, ydat = matrix(rep(1:n, each = 2), nrow = n, ncol = 2), mul = 1, sigl = 1)
fit2
n <- length(x)
ydat_base <- matrix(rep(1:n, each = 1), nrow = n, ncol = 1)
fit1 <- ismev::gev.fit(xdat = x, ydat = ydat_base, mul = 1)
fit2 <- ismev::gev.fit(xdat = x, ydat = ydat_base, mul = 1, sigl = 1)
fit3 <- ismev::gev.fit(xdat = x, ydat = ydat_base, mul = 1, sigl = 1, shl = 1)
ismev::gev.fit(xdat = x, ydat = matrix(rep(1:n, each = 2), nrow = n, ncol = 2), mul = 1, sigl = 2)
?ismev::gev.fit
ydat_base <- matrix(rep(1:n, each = 1), nrow = n, ncol = 1)
fit1 <- ismev::gev.fit(xdat = x, ydat = ydat_base, mul = 1)
fit2 <- ismev::gev.fit(xdat = x, ydat = ydat_base, mul = 1, sigl = 1)
fit3 <- ismev::gev.fit(xdat = x, ydat = ydat_base, mul = 1, sigl = 1, shl = 1)
ismev::gev.fit(xdat = x, ydat = matrix(rep(1:n, each = 1), nrow = n, ncol = 1), mul = 1)
ismev::gev.fit(xdat = x, ydat = matrix(rep(1:n, each = 2), nrow = n, ncol = 2), mul = 1, sigl = 2)
matrix(rep(1:n, each = 2), nrow = n, ncol = 2)
matrix(rep(1:n, each = 1), nrow = n, ncol = 2)
ismev::gev.fit(xdat = x, ydat = matrix(rep(1:n, each = 1), nrow = n, ncol = 2), mul = 1, sigl = 2)
n <- length(x)
ydat_base <- matrix(rep(1:n, each = 1), nrow = n, ncol = 1)
fit1 <- ismev::gev.fit(xdat = x, ydat = ydat_base, mul = 1)
fit2 <- ismev::gev.fit(xdat = x, ydat = ydat_base, mul = 1, sigl = 1)
fit3 <- ismev::gev.fit(xdat = x, ydat = ydat_base, mul = 1, sigl = 1, shl = 1)
D2 <- 2 * (-fit2$nllh + fit1$nllh)
D3 <- 2 * (-fit3$nllh + fit1$nllh)
fit <- if (D2 > 3.841) fit2 else if (D3 > 3.841) fit3 else fit1
fit
is.numeric(fit[["model"]][[1]])
is.numeric(fit[["model"]][[2]])
t_values <- 1:n
mu <- fit[["mle"]][1] + fit[["mle"]][2] * t_values
mu
fit[["mle"]][3]
fit[["mle"]][4]
rep(fit[["mle"]][3], n)
sigma <- rep(fit[["mle"]][3], n)
xi <- rep(fit[["mle"]][4], n)
length(fit[["model"]])
fit[["model"]]
is.numeric(fit[["model"]][2])
is.numeric(fit[["model"]][1])
fit[["model"]][1]
fit[["model"]][[1]]
is.numeric(fit[["model"]][[1]])
is.numeric(fit[["model"]][[2]])
fit[["mle"]][1]
fit1 <- ismev::gev.fit(xdat = x, ydat = ydat_base, mul = 1)
n <- length(x)
ydat_base <- matrix(rep(1:n, each = 1), nrow = n, ncol = 1)
fit1 <- ismev::gev.fit(xdat = x, ydat = ydat_base, mul = 1)
fit2 <- ismev::gev.fit(xdat = x, ydat = ydat_base, mul = 1, sigl = 1)
fit3 <- ismev::gev.fit(xdat = x, ydat = ydat_base, mul = 1, sigl = 1, shl = 1)
D2 <- 2 * (-fit2$nllh + fit1$nllh)
D3 <- 2 * (-fit3$nllh + fit1$nllh)
fit <- if (D2 > 3.841) fit2 else if (D3 > 3.841) fit3 else fit1
fit
fit[["mle"]][1]
fit[["mle"]][2]
mu <- fit[["mle"]][1] + fit[["mle"]][2] * t_values
mu
sigma <- rep(fit[["mle"]][3], n)
sigma
sigma + fit[["mle"]][4] * t_values
sigma + fit[["mle"]][4]
(is.numeric( fit[["model"]][[2]]))
xi <- rep(fit[["mle"]][4], n)
xi
fit=fit2
fit
(is.numeric( fit[["model"]][[2]]))
(is.numeric( fit[["model"]][[3]]))
fit=fit3
fit
t_values <- 1:n
mu <- fit[["mle"]][1] + fit[["mle"]][2] * t_values
sigma <- rep(fit[["mle"]][3], n)
xi <- rep(fit[["mle"]][4], n)
xi
(is.numeric( fit[["model"]][[2]]))
fit[["model"]][[3]]
(is.numeric( fit[["model"]][[2]]) && is.null(fit[["model"]][[3]]))
is.null(fit[["model"]][[3]])
is.numeric( fit[["model"]][[2]])
(is.numeric( fit[["model"]][[2]]) && is.numeric( fit[["model"]][[3]]))
fit
sigma + fit[["mle"]][4] * t_values
fit[["mle"]][5] + fit[["mle"]][6] * t_values
xi
if (is.numeric( fit[["model"]][[2]]) && is.null(fit[["model"]][[3]])) {
sigma <- sigma + fit[["mle"]][4] * t_values
xi <- rep(fit[["mle"]][5], n)
} else if (is.numeric( fit[["model"]][[2]]) && is.numeric( fit[["model"]][[3]]))  {
sigma <- sigma + fit[["mle"]][4] * t_values
xi <- fit[["mle"]][5] + fit[["mle"]][6] * t_values
}
xi
sigma
estimate_quantile <- function(mu, sigma, xi, p) {
zp <- ifelse(xi != 0,
mu - sigma / xi * (1 - (-log(1 - p))^(-xi)),
mu - sigma * log(-log(1 - p)))
return(zp)
}
rl <- estimate_quantile(mu, sigma, xi, p = 0.02)
rl
plot(rl)
plot(rl)
n <- length(x)
ydat_base <- matrix(rep(1:n, each = 1), nrow = n, ncol = 1)
fit1 <- ismev::gev.fit(xdat = x, ydat = ydat_base, mul = 1)
fit2 <- ismev::gev.fit(xdat = x, ydat = ydat_base, mul = 1, sigl = 1)
fit3 <- ismev::gev.fit(xdat = x, ydat = ydat_base, mul = 1, sigl = 1, shl = 1)
D2 <- 2 * (-fit2$nllh + fit1$nllh)
D3 <- 2 * (-fit3$nllh + fit1$nllh)
fit <- if (D2 > 3.841) fit2 else if (D3 > 3.841) fit3 else fit1
t_values <- 1:n
mu <- fit[["mle"]][1] + fit[["mle"]][2] * t_values
sigma <- rep(fit[["mle"]][3], n)
xi <- rep(fit[["mle"]][4], n)
if (is.numeric( fit[["model"]][[2]]) && is.null(fit[["model"]][[3]])) {
sigma <- sigma + fit[["mle"]][4] * t_values
xi <- rep(fit[["mle"]][5], n)
} else if (is.numeric( fit[["model"]][[2]]) && is.numeric( fit[["model"]][[3]]))  {
sigma <- sigma + fit[["mle"]][4] * t_values
xi <- fit[["mle"]][5] + fit[["mle"]][6] * t_values
}
rl <- estimate_quantile(mu, sigma, xi, p = 0.02)
plot(rl)
max(rl)
min(rl)
mean(rl)
# Define a function to fit a GEV model with potentially time-varying parameters
gev_fit_time_varying <- function(x) {
# Create a base matrix for ydat (time)
n <- length(x)
ydat_base <- matrix(rep(1:n, each = 1), nrow = n, ncol = 1)
# Fit three GEV models with varying complexity:
# fit1: model with time-varying mu
# fit2: model with time-varying mu and scale
# fit3: model with time-varying mu, scale and shape
fit1 <- ismev::gev.fit(xdat = x, ydat = ydat_base, mul = 1)
fit2 <- ismev::gev.fit(xdat = x, ydat = ydat_base, mul = 1, sigl = 1)
fit3 <- ismev::gev.fit(xdat = x, ydat = ydat_base, mul = 1, sigl = 1,
shl = 1)
# Calculate the deviance statistics fit2 and fit3 relative to fit1
D2 <- 2 * (-fit2$nllh + fit1$nllh)
D3 <- 2 * (-fit3$nllh + fit1$nllh)
# Choose the best fitting model based on the deviance statistics(chi square at 5%)
fit <- if (D2 > 3.841) fit2 else if (D3 > 3.841) fit3 else fit1
# Initialize and calculate the location parameter (mu) for each time point
t_values <- 1:n
mu <- fit[["mle"]][1] + fit[["mle"]][2] * t_values
# Initialize the scale (sigma) and shape (xi) parameters
sigma <- rep(fit[["mle"]][3], n)
xi <- rep(fit[["mle"]][4], n)
# Update sigma and xi if the model includes time-varying scale and/or shape parameters
if (is.numeric( fit[["model"]][[2]]) && is.null(fit[["model"]][[3]])) {
sigma <- sigma + fit[["mle"]][4] * t_values
xi <- rep(fit[["mle"]][5], n)
} else if (is.numeric( fit[["model"]][[2]]) &&
is.numeric( fit[["model"]][[3]]))  {
sigma <- sigma + fit[["mle"]][4] * t_values
xi <- fit[["mle"]][5] + fit[["mle"]][6] * t_values
}
#Define a nested function to estimate quantiles based on the GEV parameters
estimate_quantile <- function(mu, sigma, xi, p) {
zp <- ifelse(xi != 0,
mu - sigma / xi * (1 - (-log(1 - p))^(-xi)),
mu - sigma * log(-log(1 - p)))
return(zp)
}
# Calculate return levels based on the estimated GEV parameters
rl <- estimate_quantile(mu, sigma, xi, p = 0.02)
if (fit[["conv"]] == 0) {
return(rl)
} else {
return(rep(NA, n))
}
}
gev_fit_time_varying(Y)
test= gev_fit_time_varying(Y)
test
fit.gev1=gev.fit(xdat=Y)
adj_gev_fit <- alogLik(fit.gev1)
# Large inc set here for speed, sacrificing accuracy
rl <- return_level(adj_gev_fit, inc = 0.05,m=50)
rl
6.159
test
mean(test)
rl
rl$level
rl$m
View(rl)
rl[["rl_prof"]]
rl[["rl_prof"]]
mean(test)
min(test)
max(test)
?alogLik
source("R/gev_fit_time_varying.R")
c(min(test), mean(test), max(test))
rl[["rl_prof"]]
fit.gev1=gev.fit(xdat=Y)
adj_gev_fit <- alogLik(fit.gev1)
rl_stationary <- return_level(adj_gev_fit, inc = 0.05,m=50)
rl_stat= rl_stationary [["rl_prof"]]
rl_time
# ============================================================================#
# return level values with time varying GEV parameters
# ============================================================================#
test= gev_fit_time_varying(Y)
rl_time =c(min(test), mean(test), max(test))
# ============================================================================#
# return level values with GEV parameters (assuming stationary)
# ============================================================================#
fit.gev1=gev.fit(xdat=Y)
adj_gev_fit <- alogLik(fit.gev1)
rl_stationary <- return_level(adj_gev_fit, inc = 0.05,m=50)
rl_stat= rl_stationary [["rl_prof"]]
rl_time
rl_stat
styler:::style_active_file()
rl_time
rl_stat
# ============================================================================#
# load libraries
# ============================================================================#
library(evd)
library(ismev)
library(lax)
source("R/gev_fit_time_varying.R")
# ============================================================================#
# generate GEV data
# ============================================================================#
n <- 200
beta1 <- 0.015
X <- 1:n
## simulate data
Y <- rgev(n = n, loc = 0, scale = 1, shape = 0.15) + beta1 * X
# ============================================================================#
# return level values with time varying GEV parameters
# ============================================================================#
test <- gev_fit_time_varying(Y)
rl_time <- c(min(test), mean(test), max(test))
# ============================================================================#
# return level values with GEV parameters (assuming stationary)
# ============================================================================#
fit.gev1 <- gev.fit(xdat = Y)
adj_gev_fit <- alogLik(fit.gev1)
rl_stationary <- return_level(adj_gev_fit, inc = 0.05, m = 50)
rl_stat <- rl_stationary[["rl_prof"]]
# ============================================================================#
# caution: rl_time is linked but doesn't have the same interpenetration as rl_stat
#  x value risk plot : the probability that the largest load is higher than 7.621292
# constant risk plot: the risk that the highest snow load in a year is larger than
# 7.6 is less than 0.02
# ============================================================================#
rl_time
rl_stat
# ============================================================================#
# load libraries
# ============================================================================#
library(evd)
library(ismev)
library(lax)
source("R/gev_fit_time_varying.R")
# ============================================================================#
# generate GEV data
# ============================================================================#
set.seed(1253)
n <- 200
beta1 <- 0.015
X <- 1:n
## simulate data
Y <- rgev(n = n, loc = 0, scale = 1, shape = 0.15) + beta1 * X
# ============================================================================#
# return level values with time varying GEV parameters
# ============================================================================#
test <- gev_fit_time_varying(Y)
rl_time <- c(min(test), mean(test), max(test))
# ============================================================================#
# return level values with GEV parameters (assuming stationary)
# ============================================================================#
fit.gev1 <- gev.fit(xdat = Y)
adj_gev_fit <- alogLik(fit.gev1)
rl_stationary <- return_level(adj_gev_fit, inc = 0.05, m = 50)
rl_stat <- rl_stationary[["rl_prof"]]
# ============================================================================#
# caution: rl_time is linked but doesn't have the same interpenetration as rl_stat
#  x value risk plot : the probability that the largest load is higher than 7.621292
# constant risk plot: the risk that the highest snow load in a year is larger than
# 7.6 is less than 0.02
# ============================================================================#
rl_time
rl_stat
# ============================================================================#
# load libraries
# ============================================================================#
library(evd)
library(ismev)
library(lax)
source("R/gev_fit_time_varying.R")
# ============================================================================#
# generate GEV data
# ============================================================================#
set.seed(1253)
n <- 200
beta1 <- 0.015
X <- 1:n
## simulate data
Y <- rgev(n = n, loc = 0, scale = 1, shape = 0.15) + beta1 * X
# ============================================================================#
# return level values with time varying GEV parameters
# ============================================================================#
test <- gev_fit_time_varying(Y)
rl_time <- c(min(test), mean(test), max(test))
# ============================================================================#
# return level values with GEV parameters (assuming stationary)
# ============================================================================#
fit.gev1 <- gev.fit(xdat = Y)
adj_gev_fit <- alogLik(fit.gev1)
rl_stationary <- return_level(adj_gev_fit, inc = 0.05, m = 50)
rl_stat <- rl_stationary[["rl_prof"]]
# ============================================================================#
# caution: rl_time is linked but doesn't have the same interpenetration as rl_stat
#  x value risk plot : the probability that the largest load is higher than 7.621292
# constant risk plot: the risk that the highest snow load in a year is larger than
# 7.6 is less than 0.02
# ============================================================================#
rl_time
rl_stat
# ============================================================================#
# load libraries
# ============================================================================#
library(evd)
library(ismev)
library(lax)
source("R/gev_fit_time_varying.R")
# ============================================================================#
# generate GEV data
# ============================================================================#
set.seed(1253)
n <- 200
beta1 <- 0.015
X <- 1:n
## simulate data
Y <- rgev(n = n, loc = 0, scale = 1, shape = 0.15) + beta1 * X
# ============================================================================#
# return level values with time varying GEV parameters
# ============================================================================#
test <- gev_fit_time_varying(Y)
rl_time <- c(min(test), mean(test), max(test))
# ============================================================================#
# return level values with GEV parameters (assuming stationary)
# ============================================================================#
fit.gev1 <- gev.fit(xdat = Y)
adj_gev_fit <- alogLik(fit.gev1)
rl_stationary <- return_level(adj_gev_fit, inc = 0.05, m = 50)
rl_stat <- rl_stationary[["rl_prof"]]
# ============================================================================#
# caution: rl_time is linked but doesn't have the same interpenetration as rl_stat
#  x value risk plot : the probability that the largest load is higher than 7.621292
# constant risk plot: the risk that the highest snow load in a year is larger than
# 7.6 is less than 0.02
# ============================================================================#
rl_time
rl_stat
# ============================================================================#
# load libraries
# ============================================================================#
library(evd)
library(ismev)
library(lax)
source("R/gev_fit_time_varying.R")
# ============================================================================#
# generate GEV data
# ============================================================================#
set.seed(1253)
n <- 200
beta1 <- 0.015
X <- 1:n
## simulate data
Y <- rgev(n = n, loc = 0, scale = 1, shape = 0.15) + beta1 * X
# ============================================================================#
# return level values with time varying GEV parameters
# ============================================================================#
test <- gev_fit_time_varying(Y)
rl_time <- c(min(test), mean(test), max(test))
# ============================================================================#
# return level values with GEV parameters (assuming stationary)
# ============================================================================#
fit.gev1 <- gev.fit(xdat = Y)
adj_gev_fit <- alogLik(fit.gev1)
rl_stationary <- return_level(adj_gev_fit, inc = 0.05, m = 50)
rl_stat <- rl_stationary[["rl_prof"]]
# ============================================================================#
# caution: rl_time is linked but doesn't have the same interpenetration as rl_stat
#  x value risk plot : the probability that the largest load is higher than 7.621292
# constant risk plot: the risk that the highest snow load in a year is larger than
# 7.6 is less than 0.02
# ============================================================================#
rl_time
rl_stat
